package signalservice;
syntax = "proto2";


message Envelope {

  enum Type {
    SESSION_MESSAGE = 6;
    CLOSED_GROUP_MESSAGE = 7;
  }

  // @required
  required Type   type            = 1;
  optional string source          = 2;
  // @required
  required uint64 timestamp       = 5;
  optional bytes  content         = 8;
}

message TypingMessage {

    enum Action {
        STARTED = 0;
        STOPPED = 1;
    }

    required uint64 timestamp = 1;
    required Action action    = 2;
}


message Unsend {
  required uint64 timestamp = 1;
  required string author    = 2;
}

message MessageRequestResponse {
  required bool                      isApproved                = 1;
  optional bytes                     profileKey                = 2;
  optional DataMessage.LokiProfile   profile                   = 3;
}


message Content {
  reserved 7, 11, 14;
  reserved "configurationMessage", "sharedConfigMessage", "lastDisappearingMessageChangeTimestamp";

  enum ExpirationType {
    UNKNOWN             = 0;
    DELETE_AFTER_READ   = 1;
    DELETE_AFTER_SEND   = 2;
  }

  optional DataMessage                dataMessage                = 1;
  optional CallMessage                callMessage                = 3;
  optional ReceiptMessage             receiptMessage             = 5;
  optional TypingMessage              typingMessage              = 6;
  optional DataExtractionNotification dataExtractionNotification = 8;
  optional Unsend                     unsendMessage              = 9;
  optional MessageRequestResponse     messageRequestResponse     = 10;
  optional ExpirationType             expirationType             = 12;
  optional uint32                     expirationTimer            = 13;
  optional uint64                     sigTimestamp               = 15;
}


message DataExtractionNotification {

  enum Type {
    SCREENSHOT  = 1; // no way to know this on Desktop
    MEDIA_SAVED = 2; // timestamp
  }

  required Type   type      = 1;
  optional uint64 timestamp = 2;
}

message GroupUpdateInviteMessage {
  required string         groupSessionId         = 1; // The `groupIdentityPublicKey` with a `03` prefix
  required string         name                   = 2;
  required bytes          memberAuthData         = 3;
  required bytes          adminSignature         = 4;
}

message GroupUpdateInfoChangeMessage {
	enum Type {
    NAME                  = 1;
		AVATAR                = 2;
    DISAPPEARING_MESSAGES = 3;
  }

  required Type     type              = 1;
  optional string   updatedName       = 2;
  optional uint32   updatedExpiration = 3;
  required bytes    adminSignature    = 4;
}

message GroupUpdateMemberChangeMessage {
  enum Type {
    ADDED    = 1;
    REMOVED  = 2;
    PROMOTED = 3;
  }

  required Type   type               = 1;
  repeated string memberSessionIds   = 2;
  optional bool   historyShared      = 3;
  required bytes  adminSignature     = 4;

}


message GroupUpdatePromoteMessage {
  required bytes          groupIdentitySeed       = 1;
  required string         name                    = 2;
}

message GroupUpdateMemberLeftMessage {
  // the pubkey of the member left is included as part of the closed group encryption logic (senderIdentity on desktop)
}

message GroupUpdateInviteResponseMessage {
  required bool                      isApproved                = 1; // Whether the request was approved
}


message GroupUpdateDeleteMemberContentMessage {
  repeated string memberSessionIds    = 1;
  repeated string messageHashes       = 2;
  optional bytes  adminSignature      = 3;
}

message GroupUpdateMemberLeftNotificationMessage {
  // the pubkey of the member left is included as part of the closed group encryption logic (senderIdentity on desktop)
}

message GroupUpdateMessage {
  optional GroupUpdateInviteMessage                  inviteMessage                 = 1;
  optional GroupUpdateInfoChangeMessage              infoChangeMessage             = 2;
  optional GroupUpdateMemberChangeMessage            memberChangeMessage           = 3;
  optional GroupUpdatePromoteMessage                 promoteMessage                = 4;
  optional GroupUpdateMemberLeftMessage              memberLeftMessage             = 5;
  optional GroupUpdateInviteResponseMessage          inviteResponse                = 6;
  optional GroupUpdateDeleteMemberContentMessage     deleteMemberContent           = 7;
  optional GroupUpdateMemberLeftNotificationMessage  memberLeftNotificationMessage = 8;
}

message DataMessage {

  // 7 = timestamp unused and should not be used
  reserved 7;
  reserved "timestamp";

  // 5 = expireTimer unused and should not be used (in contentMessage now)
  reserved 5;
  reserved "expireTimer";

  // 104 = legacy group control message
  reserved 104;
  reserved "closedGroupControlMessage";
  // 3 = group (GroupContext) legacy group
  reserved 3;
  reserved "group";

  enum Flags {
    EXPIRATION_TIMER_UPDATE   = 2;
  }

  message Reaction {
    enum Action {
        REACT = 0;
        REMOVE = 1;
    }
    required uint64 id        = 1; // Message timestamp
    required string author    = 2;
    optional string emoji     = 3;
    required Action action    = 4;
  }

  message Quote {
    reserved 3, 4;
    reserved "text", "attachments";

    required uint64           id          = 1;
    required string           author      = 2;
  }

  message Preview {
    required string            url   = 1;
    optional string            title = 2;
    optional AttachmentPointer image = 3;
  }

  message LokiProfile {
    optional string displayName = 1;
    optional string profilePicture = 2;
    /**
     * The timestamp of the last profile update.
     * This is used to prioritize the correct profile info based on multiple and outdated incoming messages.
     * Note: this is in seconds.
     */
    optional uint64 lastProfileUpdateSeconds = 3;
  }

  message OpenGroupInvitation {
    required string url = 1;
    required string name = 3;
  }



  optional string                    body                      = 1;
  repeated AttachmentPointer         attachments               = 2;
  optional uint32                    flags                     = 4;
  optional bytes                     profileKey                = 6;
  optional Quote                     quote                     = 8;
  repeated Preview                   preview                   = 10;
  optional Reaction                  reaction                  = 11;
  optional LokiProfile               profile                   = 101;
  optional OpenGroupInvitation       openGroupInvitation       = 102;
  optional string                    syncTarget                = 105;
  optional bool                      blocksCommunityMessageRequests  = 106;
  optional GroupUpdateMessage        groupUpdateMessage              = 120;
}

message CallMessage {

  enum Type {
    PRE_OFFER          = 6;
    OFFER              = 1;
    ANSWER             = 2;
    PROVISIONAL_ANSWER = 3;
    ICE_CANDIDATES     = 4;
    END_CALL           = 5;
  }

  required Type type              = 1;
  repeated string sdps            = 2;
  repeated uint32 sdpMLineIndexes = 3;
  repeated string sdpMids         = 4;

  required string uuid            = 5;

}

message ReceiptMessage {

  enum Type {
    READ     = 1;
  }

  // @required
  required Type   type      = 1;
  repeated uint64 timestamp = 2;
}

message AttachmentPointer {

  enum Flags {
    VOICE_MESSAGE = 1;
  }

  // @required
  required fixed64 deprecated_id = 1;
  optional string  contentType   = 2;
  optional bytes   key           = 3;
  optional uint32  size          = 4;
  optional bytes   digest        = 6;
  optional string  fileName      = 7;
  optional uint32  flags         = 8;
  optional uint32  width         = 9;
  optional uint32  height        = 10;
  optional string  caption       = 11;
  optional string  url           = 101;
  optional string  serverPubkey  = 102;
  /**
   * Whether the attachment is encrypted using the deterministic encryption provided by libsession.
   * If the attachment is encrypted using the legacy encryption, this field can be unset or set to false.
   */
  optional bool deterministicEncryption = 103;
}




message WebSocketRequestMessage {
  optional string verb    = 1;
  optional string path    = 2;
  optional bytes  body    = 3;
  repeated string headers = 5;
  optional uint64 id      = 4;
}


message WebSocketMessage {
  enum Type {
      UNKNOWN  = 0;
      REQUEST  = 1;
      RESPONSE = 2;
  }

  optional Type                     type     = 1;
  optional WebSocketRequestMessage  request  = 2;
}
